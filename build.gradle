plugins {
    id 'java'
    id 'org.springframework.boot' version '2.2.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
}

group 'kr.devflix'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'pl.allegro.tech.boot:handlebars-spring-boot-starter:0.3.2'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.session:spring-session-jdbc'
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'com.vladmihalcea:hibernate-types-52:2.10.1'
    implementation 'com.sun.mail:javax.mail:1.6.2'
    implementation 'org.postgresql:postgresql:42.2.18'
    implementation 'com.navercorp.lucy:lucy-xss-servlet:2.0.0'
    implementation 'org.jsoup:jsoup:1.13.1'
    implementation 'net.sourceforge.htmlunit:htmlunit:2.47.1'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    implementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    implementation 'com.querydsl:querydsl-jpa'
    implementation 'com.querydsl:querydsl-apt'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test:5.4.5'
}

bootJar {
    processResources {
        exclude('assets', 'templates', 'db')
    }
}

task assetsZip(type: Zip) {
    archiveName('assets.zip')
    destinationDir(file('build/'))

    from(file('src/main/resources/assets'))
}

task templatesZip(type: Zip) {
    archiveName('templates.zip')
    destinationDir(file('build/'))

    from(file('src/main/resources/templates'))
}

def querydslDir = 'src/main/generated'

querydsl {
    library = 'com.querydsl:querydsl-apt'
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main.java.srcDirs += querydslDir
}

configurations {
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}